{"version":3,"sources":["redux/data/encountersSlice.ts","redux/data/monstersSlice.ts","redux/initiative-tracker/initiativeTrackerSlice.ts","redux/initiative-tracker/quickAddSlice.ts","redux/store.ts","redux/persistence.ts","pages/DndCombatTracker.tsx","pages/EditEncounter.tsx","pages/MyEncounters.tsx","pages/MyMonsters.tsx","pages/RunEncounter/QuickAddModal.tsx","pages/RunEncounter/CreatureHealthTracker.tsx","pages/RunEncounter/DisplayInitiative.tsx","pages/RunEncounter/index.tsx","App.tsx","index.tsx"],"names":["encountersAdapter","createEntityAdapter","selectId","encounter","uuid","sortComparer","a","b","naturalCompare","name","caseInsensitive","encountersSlice","createSlice","initialState","getInitialState","reducers","addEncounter","addOne","removeEncounter","removeOne","actions","selectAllEncounters","getSelectors","state","encounters","selectAll","monstersAdapter","monster","monstersSlice","addMonster","removeMonster","creatures","currentTurn","round","sortInitiativeCreatures","sort","initiativeDiff","initiative","order","currentOrder","currentInitiative","forEach","creature","normalizeCreatureOrders","adjustedCreatureIndex","index","length","initiativeTrackerSlice","addCreatures","action","currentTurnUuid","payload","map","uuidv4","push","findIndex","deleteCreature","splice","newTurn","editCreature","previous","next","Math","max","changeInitiative","newInitiative","isNaN","Number","rollAllInitiative","type","floor","random","adjustCreatureHealth","num","min","hp","currentHp","amount","maxHp","reorderCreature","newIndex","restartEncounter","clearEncounter","JSON","parse","stringify","selectInitiativeTurn","initiativeTracker","selectInitiativeRound","selectSortedInitiativeCreatures","createSelector","turn","slice","concat","ac","quantity","modalOpen","editingMode","editIndex","quickAddSlice","changeName","changeAc","changeMaxHp","changeType","changeQuantity","open","close","addRow","edit","selectCreatures","quickAdd","selectEditMode","selectEditIndex","selectModalOpen","rootReducer","combineReducers","monsters","store","configureStore","reducer","preloadedState","serializedState","localStorage","getItem","err","loadState","subscribe","getState","setItem","console","log","useAppDispatch","useDispatch","useAppSelector","useSelector","DndCombatTracker","EditEncounter","EmptyPlaceholder","Alert","variant","EncounterList","encounterElements","MyEncounters","Container","fluid","className","Row","Col","md","Stack","direction","gap","to","Button","onClick","alert","MyMonsters","AddNewCreature","props","dispatch","Form","Group","Label","InputGroup","hasValidation","Control","isInvalid","validated","currentCreature","value","onChange","e","target","editMode","ButtonGroup","radio","idx","ToggleButton","id","checked","currentTarget","QuickAddModal","useState","setValidated","Modal","size","show","onHide","centered","Header","closeButton","Title","Body","Footer","filteredCreatures","filter","reduce","valid","initiativeCreatures","Array","fill","flat","CreatureHealthTracker","useRef","showHealth","setShowHealth","hpAdjustment","_setHpAdjustment","ref","style","minWidth","Overlay","rootClose","current","placement","Popover","InitiativeCreature","width","fontSize","DisplayInitiative","onDragEnd","result","destination","source","droppableId","provided","droppableProps","innerRef","draggableId","snapshot","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","marginBottom","opacity","placeholder","Counter","text","InitiativeControlBar","borderBottom","DropdownButton","title","Dropdown","Item","as","RunEncounter","App","path","element","replace","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.287db0de.chunk.js","sourcesContent":["import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport naturalCompare from \"string-natural-compare\";\nimport { UniqueEntity, UniqueIdType } from \"../models\";\n\nexport interface EncounterCreature {\n  creatureUuid: UniqueIdType;\n}\n\nexport interface Encounter extends UniqueEntity {\n  name: string;\n  creatures: EncounterCreature[];\n}\n\nexport const encountersAdapter = createEntityAdapter<Encounter>({\n  selectId: (encounter) => encounter.uuid,\n  sortComparer: (a, b) => naturalCompare(a.name, b.name, { caseInsensitive: true })\n});\n\nexport const encountersSlice = createSlice({\n  name: \"encounters\",\n  initialState: encountersAdapter.getInitialState,\n  reducers: {\n    addEncounter: encountersAdapter.addOne,\n    removeEncounter: encountersAdapter.removeOne\n  }\n});\n\nexport const { addEncounter, removeEncounter } = encountersSlice.actions;\nexport const { selectAll: selectAllEncounters } = encountersAdapter.getSelectors<RootState>(\n  (state) => state.encounters\n);\n\nexport default encountersSlice.reducer;\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nimport naturalCompare from \"string-natural-compare\";\nimport { Creature } from \"../models\";\n\ninterface Monster extends Creature {\n  type: \"monster\";\n}\n\nexport const monstersAdapter = createEntityAdapter<Monster>({\n  selectId: (monster) => monster.uuid,\n  sortComparer: (a, b) => naturalCompare(a.name, b.name, { caseInsensitive: true })\n});\n\nexport const monstersSlice = createSlice({\n  name: \"monsters\",\n  initialState: monstersAdapter.getInitialState,\n  reducers: {\n    addMonster: monstersAdapter.addOne,\n    removeMonster: monstersAdapter.removeOne\n  }\n});\n\nexport const { addMonster, removeMonster } = monstersSlice.actions;\n\nexport default monstersSlice.reducer;\n","import { createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Creature } from \"../models\";\nimport { RootState } from \"../store\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { QuickAddCreature } from \"./quickAddSlice\";\n\nexport interface InitiativeCreature extends Creature {\n  initiative: number;\n  order: number;\n  currentHp: number;\n}\nexport type InitiativeCreatureExternal = Omit<InitiativeCreature, \"uuid\" | \"order\">;\n\nconst initialState = {\n  creatures: [] as InitiativeCreature[],\n  currentTurn: 0,\n  round: 0\n};\n\n// Pass creatures as sorted array (initiative descending, order ascending)\nfunction normalizeCreatureOrders(creatures: InitiativeCreature[]) {\n  let currentOrder = 0;\n  let currentInitiative: number | null = null;\n  creatures.forEach((creature) => {\n    if (creature.initiative !== currentInitiative) {\n      currentInitiative = creature.initiative;\n      currentOrder = 0;\n    } else {\n      currentOrder++;\n    }\n\n    creature.order = currentOrder;\n  });\n}\n\nfunction sortInitiativeCreatures(creatures: InitiativeCreature[]) {\n  creatures.sort((a, b) => {\n    const initiativeDiff = b.initiative - a.initiative;\n    if (initiativeDiff === 0) {\n      return a.order - b.order;\n    }\n\n    return initiativeDiff;\n  });\n\n  normalizeCreatureOrders(creatures);\n}\n\nfunction adjustedCreatureIndex(state: RootState[\"initiativeTracker\"], index: number) {\n  return (index + state.currentTurn) % state.creatures.length;\n}\n\nexport const initiativeTrackerSlice = createSlice({\n  name: \"initiativeTracker\",\n  initialState,\n  reducers: {\n    addCreatures: (state, action: PayloadAction<InitiativeCreatureExternal[]>) => {\n      const currentTurnUuid = state.creatures[state.currentTurn]?.uuid;\n\n      const creatures: InitiativeCreature[] = action.payload.map((creature, index) => ({\n        order: index,\n        uuid: uuidv4(),\n        ...creature\n      }));\n      state.creatures.push(...creatures);\n      sortInitiativeCreatures(state.creatures);\n\n      // If combat has started, preserve the turn of the creature whose turn it currently is\n      if (state.creatures.length > 1 && (state.currentTurn !== 0 || state.round !== 0)) {\n        state.currentTurn = state.creatures.findIndex((creature) => creature.uuid === currentTurnUuid);\n      }\n    },\n    deleteCreature: (state, action: PayloadAction<number>) => {\n      const currentTurnUuid = state.creatures[state.currentTurn]?.uuid;\n\n      const index = adjustedCreatureIndex(state, action.payload);\n      state.creatures.splice(index, 1);\n\n      // If combat has started, preserve the turn of the creature whose turn it currently is, unless they were just deleted\n      if (state.creatures.length > 1 && (state.currentTurn !== 0 || state.round !== 0)) {\n        const newTurn = state.creatures.findIndex((creature) => creature.uuid === currentTurnUuid);\n        if (newTurn !== -1) {\n          state.currentTurn = newTurn;\n        }\n      }\n    },\n    editCreature: (state, action: PayloadAction<{ index: number; creature: QuickAddCreature }>) => {\n      const index = adjustedCreatureIndex(state, action.payload.index);\n      state.creatures[index] = {\n        ...state.creatures[index],\n        ...action.payload.creature\n      };\n      sortInitiativeCreatures(state.creatures);\n    },\n    previous: (state) => {\n      state.currentTurn--;\n      if (state.currentTurn === -1 && state.round > 0) {\n        state.round -= 1;\n        state.currentTurn = state.creatures.length - 1;\n      }\n\n      if (state.currentTurn < 0) {\n        state.currentTurn = 0;\n      }\n      if (state.round < 0) {\n        state.round = 0;\n      }\n    },\n    next: (state) => {\n      state.currentTurn = (state.currentTurn + 1) % Math.max(state.creatures.length, 1);\n      if (state.currentTurn === 0) {\n        state.round += 1;\n      }\n    },\n    changeInitiative: (state, action: PayloadAction<{ index: number; newInitiative: string }>) => {\n      const newInitiative = action.payload.newInitiative;\n      if (isNaN(Number(newInitiative)) && newInitiative !== \"\") {\n        return;\n      }\n\n      const index = adjustedCreatureIndex(state, action.payload.index);\n      state.creatures[index].initiative = newInitiative === \"\" ? 0 : Number(newInitiative);\n      sortInitiativeCreatures(state.creatures);\n    },\n    rollAllInitiative: (state) => {\n      state.creatures.forEach((creature) => {\n        if (creature.type === \"monster\") {\n          const min = 1;\n          const max = 20;\n          creature.initiative = Math.floor(Math.random() * (max - min + 1) + min);\n          sortInitiativeCreatures(state.creatures);\n        }\n      });\n    },\n    adjustCreatureHealth: (state, action: PayloadAction<{ index: number; amount: number }>) => {\n      const index = adjustedCreatureIndex(state, action.payload.index);\n\n      const hp = state.creatures[index].currentHp + action.payload.amount;\n      const clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max);\n\n      state.creatures[index].currentHp = clamp(hp, 0, state.creatures[index].maxHp);\n    },\n    reorderCreature: (state, action: PayloadAction<{ index: number; newIndex: number }>) => {\n      const index = adjustedCreatureIndex(state, action.payload.index);\n      const newIndex = adjustedCreatureIndex(state, action.payload.newIndex);\n\n      state.creatures[index].initiative = state.creatures[newIndex].initiative;\n      state.creatures[index].order = state.creatures[newIndex].order + (index < newIndex ? 1 : -1);\n\n      sortInitiativeCreatures(state.creatures);\n    },\n    restartEncounter: (state) => {\n      state.currentTurn = 0;\n      state.round = 0;\n      state.creatures.forEach((creature) => {\n        creature.currentHp = creature.maxHp;\n      });\n    },\n    clearEncounter: () => JSON.parse(JSON.stringify(initialState))\n  }\n});\n\nexport const {\n  addCreatures,\n  deleteCreature,\n  editCreature,\n  changeInitiative,\n  next,\n  previous,\n  adjustCreatureHealth,\n  rollAllInitiative,\n  reorderCreature,\n  restartEncounter,\n  clearEncounter\n} = initiativeTrackerSlice.actions;\nexport const selectInitiativeTurn = (state: RootState): number => state.initiativeTracker.currentTurn;\nexport const selectInitiativeRound = (state: RootState): number => state.initiativeTracker.round;\nexport const selectInitiativeCreatures = (state: RootState): InitiativeCreature[] => state.initiativeTracker.creatures;\n\nexport const selectSortedInitiativeCreatures = createSelector(\n  selectInitiativeCreatures,\n  selectInitiativeTurn,\n  (creatures, turn) => creatures.slice(turn).concat(creatures.slice(0, turn))\n);\n\nexport default initiativeTrackerSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { CreatureType } from \"../models\";\nimport { RootState } from \"../store\";\nimport { InitiativeCreature } from \"./initiativeTrackerSlice\";\n\nconst initialState = {\n  creatures: [\n    {\n      name: \"\",\n      ac: 0,\n      maxHp: 0,\n      initiative: 0,\n      type: \"monster\" as CreatureType,\n      quantity: 1\n    }\n  ] as QuickAddCreature[],\n  modalOpen: false,\n  editingMode: false,\n  editIndex: 0\n};\n\nexport interface QuickAddCreature {\n  name: string;\n  ac: number;\n  maxHp: number;\n  initiative: number;\n  type: CreatureType;\n  quantity: number;\n}\n\nexport const quickAddSlice = createSlice({\n  name: \"quickAdd\",\n  initialState,\n  reducers: {\n    changeName: (state, action: PayloadAction<{ name: string; index: number }>) => {\n      state.creatures[action.payload.index].name = action.payload.name;\n    },\n    changeAc: (state, action: PayloadAction<{ ac: number; index: number }>) => {\n      if (isNaN(action.payload.ac)) {\n        return;\n      }\n      state.creatures[action.payload.index].ac = action.payload.ac;\n    },\n    changeMaxHp: (state, action: PayloadAction<{ maxHp: number; index: number }>) => {\n      if (isNaN(action.payload.maxHp)) {\n        return;\n      }\n      state.creatures[action.payload.index].maxHp = action.payload.maxHp;\n    },\n    changeInitiative: (state, action: PayloadAction<{ initiative: number; index: number }>) => {\n      if (isNaN(action.payload.initiative)) {\n        return;\n      }\n      state.creatures[action.payload.index].initiative = action.payload.initiative;\n    },\n    changeType: (state, action: PayloadAction<{ type: CreatureType; index: number }>) => {\n      state.creatures[action.payload.index].type = action.payload.type;\n    },\n    changeQuantity: (state, action: PayloadAction<{ quantity: number; index: number }>) => {\n      if (isNaN(action.payload.quantity)) {\n        return;\n      }\n      state.creatures[action.payload.index].quantity = action.payload.quantity;\n    },\n    open: (state) => {\n      state.modalOpen = true;\n    },\n    close: () => JSON.parse(JSON.stringify(initialState)),\n    addRow: (state) => {\n      const creature = {\n        name: \"\",\n        ac: 0,\n        maxHp: 0,\n        initiative: 0,\n        type: \"monster\" as CreatureType,\n        quantity: 1\n      };\n      state.creatures.push(creature);\n    },\n    edit: (state, action: PayloadAction<{ index: number; creature: InitiativeCreature }>) => {\n      state.editingMode = true;\n      state.creatures = [\n        {\n          name: action.payload.creature.name ?? \"\",\n          ac: action.payload.creature.ac ?? 0,\n          maxHp: action.payload.creature.maxHp ?? 0,\n          initiative: action.payload.creature.initiative ?? 0,\n          quantity: 0,\n          type: action.payload.creature.type ?? \"monster\"\n        }\n      ];\n      state.modalOpen = true;\n      state.editIndex = action.payload.index;\n    }\n  }\n});\n\nexport const {\n  changeName,\n  changeAc,\n  changeMaxHp,\n  changeInitiative,\n  changeQuantity,\n  open,\n  close,\n  edit,\n  changeType,\n  addRow\n} = quickAddSlice.actions;\nexport const selectCreatures = (state: RootState): QuickAddCreature[] => state.quickAdd.creatures;\nexport const selectEditMode = (state: RootState): boolean => state.quickAdd.editingMode;\nexport const selectEditIndex = (state: RootState): number => state.quickAdd.editIndex;\nexport const selectModalOpen = (state: RootState): boolean => state.quickAdd.modalOpen;\n\nexport default quickAddSlice.reducer;\n","import { CombinedState, combineReducers, configureStore, Reducer } from \"@reduxjs/toolkit\";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport encountersSlice from \"./data/encountersSlice\";\nimport monstersSlice from \"./data/monstersSlice\";\nimport initiativeTrackerSlice from \"./initiative-tracker/initiativeTrackerSlice\";\nimport quickAddSlice from \"./initiative-tracker/quickAddSlice\";\nimport { loadState, saveState } from \"./persistence\";\n\nconst rootReducer = combineReducers({\n  encounters: encountersSlice,\n  monsters: monstersSlice,\n  initiativeTracker: initiativeTrackerSlice,\n  quickAdd: quickAddSlice\n});\n\n// Infer the type of the root state from the root reducer itself\ntype ExtractStateType<P> = P extends Reducer<CombinedState<infer S>> ? S : never;\nexport type RootState = ExtractStateType<typeof rootReducer>;\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  preloadedState: loadState()\n});\n\nstore.subscribe(saveState);\n\n// Infer `AppDispatch` types from the store itself\nexport type AppDispatch = typeof store.dispatch;\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { RootState, store } from \"./store\";\n\nexport const saveState = (): void => {\n  try {\n    const state = store.getState();\n\n    localStorage.setItem(\"state\", JSON.stringify(state));\n  } catch {\n    console.log(\"Couldn't save the app state!\");\n  }\n};\n\nexport const loadState = (): RootState | undefined => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n","import React from \"react\";\nimport { Outlet } from \"react-router-dom\";\n\nconst DndCombatTracker: React.FunctionComponent = () => (\n  <div>\n    <Outlet />\n  </div>\n);\n\nexport default DndCombatTracker;\n","import React from \"react\";\n\nconst EditEncounter: React.FunctionComponent = () => <div>This is where you will go to edit an encounter!</div>;\n\nexport default EditEncounter;\n","import React from \"react\";\n\nimport { Alert, Button, Col, Container, Row, Stack } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { selectAllEncounters } from \"../redux/data/encountersSlice\";\nimport { useAppSelector } from \"../redux/store\";\n\nfunction EmptyPlaceholder() {\n  return <Alert variant=\"info\">There are no encounters yet. Create one now!</Alert>;\n}\n\nfunction EncounterList() {\n  const encounters = useAppSelector(selectAllEncounters);\n  const encounterElements = encounters.map((encounter) => <div key={encounter.uuid}>{encounter.name}</div>);\n\n  return <div>{encounters.length === 0 ? <EmptyPlaceholder /> : encounterElements}</div>;\n}\n\nconst MyEncounters: React.FunctionComponent = () => (\n  <div>\n    <Container fluid className=\"my-3\">\n      <Row>\n        <Col>\n          <h1>My Encounters</h1>\n        </Col>\n        <Col md=\"auto\">\n          <Stack direction=\"horizontal\" gap={2}>\n            <Link to=\"/encounters/quick/run\">\n              <Button variant=\"outline-primary\">Quick Run Encounter</Button>\n            </Link>\n            <Button variant=\"primary\" onClick={() => alert(\"Not implemented yet!\")}>\n              Add Encounter\n            </Button>\n          </Stack>\n        </Col>\n      </Row>\n      <Row>\n        <EncounterList />\n      </Row>\n    </Container>\n  </div>\n);\n\nexport default MyEncounters;\n","import React from \"react\";\n\nconst MyMonsters: React.FunctionComponent = () => <div>This is a list of all my monsters:</div>;\n\nexport default MyMonsters;\n","import React, { useState } from \"react\";\nimport { Button, ButtonGroup, Col, Form, InputGroup, Modal, Row, ToggleButton } from \"react-bootstrap\";\nimport { addCreatures, editCreature } from \"../../redux/initiative-tracker/initiativeTrackerSlice\";\nimport {\n  changeName,\n  changeAc,\n  changeMaxHp,\n  changeInitiative,\n  close,\n  changeType,\n  changeQuantity,\n  selectCreatures,\n  QuickAddCreature,\n  selectEditMode,\n  selectModalOpen,\n  selectEditIndex,\n  addRow\n} from \"../../redux/initiative-tracker/quickAddSlice\";\nimport { CreatureType } from \"../../redux/models\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/store\";\n\nfunction AddNewCreature(props: {\n  currentCreature: QuickAddCreature;\n  editMode: boolean;\n  validated: boolean;\n  index: number;\n}) {\n  const dispatch = useAppDispatch();\n\n  const radios = [\n    { name: \"Player\", value: \"player\" },\n    { name: \"Monster\", value: \"monster\" }\n  ];\n  return (\n    <Row>\n      <Col>\n        <Form.Group className=\"mv-3\">\n          <Form.Label>Name</Form.Label>\n          <InputGroup hasValidation>\n            <Form.Control\n              isInvalid={props.validated && props.currentCreature.name === \"\"}\n              value={props.currentCreature.name}\n              onChange={(e) => {\n                dispatch(changeName({ name: e.target.value, index: props.index }));\n              }}\n              type=\"text\"\n            ></Form.Control>\n          </InputGroup>\n        </Form.Group>\n      </Col>\n      <Col>\n        <Form.Group className=\"mv-3\">\n          <Form.Label>Armor Class</Form.Label>\n          <Form.Control\n            value={props.currentCreature.ac}\n            onChange={(e) => {\n              dispatch(changeAc({ ac: Number(e.target.value), index: props.index }));\n            }}\n            type=\"text\"\n          ></Form.Control>\n        </Form.Group>\n      </Col>\n      <Col>\n        <Form.Group className=\"mv-3\">\n          <Form.Label>Max HP</Form.Label>\n          <Form.Control\n            value={props.currentCreature.maxHp}\n            onChange={(e) => {\n              dispatch(changeMaxHp({ maxHp: Number(e.target.value), index: props.index }));\n            }}\n            type=\"text\"\n          ></Form.Control>\n        </Form.Group>\n      </Col>\n      <Col>\n        <Form.Group className=\"mv-3\">\n          <Form.Label>Initiative</Form.Label>\n          <Form.Control\n            value={props.currentCreature.initiative}\n            onChange={(e) => {\n              dispatch(changeInitiative({ initiative: Number(e.target.value), index: props.index }));\n            }}\n            type=\"text\"\n          ></Form.Control>\n        </Form.Group>\n      </Col>\n      {!props.editMode && (\n        <Col>\n          <Form.Group className=\"mv-3\">\n            <Form.Label>Quantity</Form.Label>\n            <Form.Control\n              value={props.currentCreature.quantity}\n              onChange={(e) => {\n                dispatch(changeQuantity({ quantity: Number(e.target.value), index: props.index }));\n              }}\n              type=\"text\"\n            ></Form.Control>\n          </Form.Group>\n        </Col>\n      )}\n\n      <Col>\n        <Form.Group className=\"mv-3\">\n          <Form.Label>Creature Type</Form.Label>\n          <ButtonGroup>\n            {radios.map((radio, idx) => (\n              <ToggleButton\n                key={idx}\n                id={`radio-${props.index}-${idx}`}\n                type=\"radio\"\n                variant={idx % 2 ? \"outline-danger\" : \"outline-success\"}\n                name={`radio-${props.index}`}\n                value={radio.value}\n                checked={props.currentCreature.type === (radio.value as CreatureType)}\n                onChange={(e) =>\n                  dispatch(changeType({ type: e.currentTarget.value as CreatureType, index: props.index }))\n                }\n              >\n                {radio.name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </Form.Group>\n      </Col>\n    </Row>\n  );\n}\n\nconst QuickAddModal: React.FunctionComponent = () => {\n  const creatures = useAppSelector(selectCreatures);\n  const dispatch = useAppDispatch();\n  const editIndex = useAppSelector(selectEditIndex);\n  const editMode = useAppSelector(selectEditMode);\n  const [validated, setValidated] = useState(false);\n\n  const save = () => {\n    setValidated(true);\n\n    const filteredCreatures = creatures.filter(\n      (creature) =>\n        !(\n          creature.name === \"\" &&\n          creature.ac === 0 &&\n          creature.maxHp === 0 &&\n          creature.initiative === 0 &&\n          creature.quantity === 1\n        )\n    );\n\n    const valid = filteredCreatures.reduce((valid, creature) => valid && creature.name !== \"\", true);\n    if (!valid) {\n      return;\n    }\n\n    const initiativeCreatures = filteredCreatures\n      .map((creature) => ({ ...creature, currentHp: creature.maxHp }))\n      .map((creature) => new Array(creature.quantity).fill(creature))\n      .flat();\n\n    if (!editMode) {\n      dispatch(addCreatures(initiativeCreatures));\n    } else {\n      dispatch(editCreature({ index: editIndex, creature: creatures[0] }));\n    }\n    dispatch(close());\n  };\n\n  return (\n    <Form>\n      <Modal size=\"lg\" show={useAppSelector(selectModalOpen)} onHide={() => dispatch(close())} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Quick Add Creature</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            {creatures.map((creature, index) => (\n              <AddNewCreature\n                key={index}\n                currentCreature={creature}\n                editMode={editMode}\n                validated={validated}\n                index={index}\n              ></AddNewCreature>\n            ))}\n            {!editMode && (\n              <Button className=\"my-2\" variant=\"primary\" onClick={() => dispatch(addRow())}>\n                Add Row\n              </Button>\n            )}\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => dispatch(close())}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={save}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </Form>\n  );\n};\n\nexport default QuickAddModal;\n","import React, { useRef, useState } from \"react\";\nimport { Button, Form, Overlay, Popover, Stack } from \"react-bootstrap\";\nimport { InitiativeCreature, adjustCreatureHealth } from \"../../redux/initiative-tracker/initiativeTrackerSlice\";\nimport { useAppDispatch } from \"../../redux/store\";\n\ninterface Props {\n  creature: InitiativeCreature;\n  index: number;\n}\n\nconst CreatureHealthTracker: React.FunctionComponent<Props> = (props) => {\n  const target = useRef(null);\n  const [showHealth, setShowHealth] = useState(false);\n  const [hpAdjustment, _setHpAdjustment] = useState(\"0\");\n\n  const dispatch = useAppDispatch();\n\n  const setHpAdjustment = (value: string) => {\n    if (isNaN(Number(value)) && value !== \"\") {\n      return;\n    }\n\n    _setHpAdjustment(value === \"\" ? \"\" : value);\n  };\n\n  const close = () => {\n    _setHpAdjustment(\"0\");\n    setShowHealth(false);\n  };\n\n  const heal = () => {\n    dispatch(adjustCreatureHealth({ index: props.index, amount: Number(hpAdjustment) }));\n    close();\n  };\n\n  const damage = () => {\n    dispatch(adjustCreatureHealth({ index: props.index, amount: -Number(hpAdjustment) }));\n    close();\n  };\n\n  return (\n    <>\n      <div ref={target} onClick={() => setShowHealth(true)} style={{ minWidth: \"110px\" }}>\n        <div>HP</div>\n        <div className=\"flex-row align-items-center\">\n          <div className=\"bg-white p-2 rounded d-inline-block\">{props.creature.currentHp}</div>\n          <span className=\"mx-2\">/</span>\n          <span>{props.creature.maxHp}</span>\n        </div>\n      </div>\n      <Overlay rootClose={true} target={target.current} show={showHealth} placement=\"right\" onHide={close}>\n        <Popover>\n          <Stack direction=\"vertical\" gap={2}>\n            <Button variant=\"success\" onClick={heal}>\n              Heal\n            </Button>\n            <Form.Control value={hpAdjustment} type=\"text\" onChange={(e) => setHpAdjustment(e.target.value)} />\n            <Button variant=\"danger\" onClick={damage}>\n              Damage\n            </Button>\n          </Stack>\n        </Popover>\n      </Overlay>\n    </>\n  );\n};\nexport default CreatureHealthTracker;\n","import React from \"react\";\nimport { Button, Form, Stack } from \"react-bootstrap\";\n\nimport QuickAddModal from \"./QuickAddModal\";\nimport { open, edit } from \"../../redux/initiative-tracker/quickAddSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/store\";\nimport {\n  changeInitiative,\n  deleteCreature,\n  InitiativeCreature as InitiativeCreatureType,\n  selectSortedInitiativeCreatures,\n  rollAllInitiative,\n  reorderCreature\n} from \"../../redux/initiative-tracker/initiativeTrackerSlice\";\n\nimport \"./DisplayInitiative.css\";\nimport CreatureHealthTracker from \"./CreatureHealthTracker\";\nimport {\n  DragDropContext,\n  Draggable,\n  DraggingStyle,\n  Droppable,\n  DropResult,\n  NotDraggingStyle\n} from \"react-beautiful-dnd\";\n\nfunction InitiativeCreature(props: { creature: InitiativeCreatureType; index: number }) {\n  const dispatch = useAppDispatch();\n\n  return (\n    <div className=\"initiative-creature\">\n      <div>\n        <div>\n          <div>INITIATIVE</div>\n          <Form.Control\n            type=\"text\"\n            value={props.creature.initiative ?? \"\"}\n            style={{ width: \"100px\" }}\n            className=\"text-center\"\n            onChange={(e) => dispatch(changeInitiative({ index: props.index, newInitiative: e.target.value }))}\n          />\n        </div>\n      </div>\n      <div className=\"flex-grow-1 text-start\">\n        <div className=\"fw-bold\" style={{ fontSize: \"1.5em\" }}>\n          {props.creature.name}\n        </div>\n        <div>AC {props.creature.ac}</div>\n\n        <Stack direction=\"horizontal\" gap={2}>\n          <Button onClick={() => dispatch(edit({ index: props.index, creature: props.creature }))}>Edit</Button>\n          <Button variant=\"danger\" onClick={() => dispatch(deleteCreature(props.index))}>\n            Delete\n          </Button>\n        </Stack>\n      </div>\n      <div>\n        <CreatureHealthTracker index={props.index} creature={props.creature} />\n      </div>\n    </div>\n  );\n}\n\nconst DisplayInitiative: React.FunctionComponent = () => {\n  const initiativeCreatures = useAppSelector(selectSortedInitiativeCreatures);\n  const dispatch = useAppDispatch();\n\n  const onDragEnd = (result: DropResult) => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    dispatch(reorderCreature({ index: result.source.index, newIndex: result.destination.index }));\n  };\n\n  const getItemStyle = (\n    isDragging: boolean,\n    draggableStyle: NotDraggingStyle | DraggingStyle | undefined\n  ): React.CSSProperties => ({\n    userSelect: \"none\",\n    marginBottom: \"1rem\",\n    ...draggableStyle,\n\n    // must come after ...draggableStyle\n    opacity: isDragging ? 0.5 : 1\n  });\n\n  return (\n    <div>\n      <Stack className=\"my-2\" direction=\"horizontal\" gap={2}>\n        <Button onClick={() => dispatch(open())}>Quick Add Creature</Button>\n        <Button onClick={() => dispatch(rollAllInitiative())}>Roll Initiative</Button>\n      </Stack>\n      <QuickAddModal />\n\n      <div>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"droppable\">\n            {(provided) => (\n              <div {...provided.droppableProps} ref={provided.innerRef}>\n                {initiativeCreatures.map((creature, index) => (\n                  <Draggable key={creature.uuid} draggableId={creature.uuid} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}\n                      >\n                        <InitiativeCreature key={creature.uuid} creature={creature} index={index} />\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayInitiative;\n","import React from \"react\";\nimport { Button, Col, Container, Dropdown, DropdownButton, Row, Stack } from \"react-bootstrap\";\nimport DisplayInitiative from \"./DisplayInitiative\";\nimport {\n  next,\n  previous,\n  selectInitiativeRound,\n  selectInitiativeTurn,\n  restartEncounter,\n  clearEncounter\n} from \"../../redux/initiative-tracker/initiativeTrackerSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/store\";\n\nfunction Counter(props: { text: string; value: number }) {\n  return (\n    <div className=\"text-center fw-bold\">\n      <div>{props.text}</div>\n      <div style={{ fontSize: \"1.5em\" }}>{props.value + 1}</div>\n    </div>\n  );\n}\n\nfunction InitiativeControlBar() {\n  const turn = useAppSelector(selectInitiativeTurn);\n  const round = useAppSelector(selectInitiativeRound);\n\n  const dispatch = useAppDispatch();\n\n  return (\n    <Container fluid className=\"p-2 mb-4\" style={{ borderBottom: \"2px solid black\" }}>\n      <Row className=\"align-items-center\">\n        <Col>\n          <h1 className=\"fw-bold\">Quick Encounter</h1>\n        </Col>\n        <Col>\n          <Stack direction=\"horizontal\" gap={4}>\n            <Counter text=\"ROUND\" value={round} />\n            <Counter text=\"TURN\" value={turn} />\n          </Stack>\n        </Col>\n        <Col md=\"auto\">\n          <Stack direction=\"horizontal\" gap={2}>\n            <Button variant=\"outline-primary\" onClick={() => dispatch(previous())}>\n              Previous turn\n            </Button>\n            <Button onClick={() => dispatch(next())}>Next turn</Button>\n            <DropdownButton title=\"More\" variant=\"secondary\">\n              <Dropdown.Item as=\"button\" onClick={() => dispatch(restartEncounter())}>\n                Restart encounter\n              </Dropdown.Item>\n              <Dropdown.Item as=\"button\" onClick={() => dispatch(clearEncounter())}>\n                Clear initiative order\n              </Dropdown.Item>\n            </DropdownButton>\n          </Stack>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nconst RunEncounter: React.FunctionComponent = () => (\n  <div>\n    <InitiativeControlBar></InitiativeControlBar>\n    <DisplayInitiative></DisplayInitiative>\n  </div>\n);\n\nexport default RunEncounter;\n","import React from \"react\";\nimport { BrowserRouter, Navigate, Route, Routes } from \"react-router-dom\";\n\nimport DndCombatTracker from \"./pages/DndCombatTracker\";\nimport EditEncounter from \"./pages/EditEncounter\";\nimport MyEncounters from \"./pages/MyEncounters\";\nimport MyMonsters from \"./pages/MyMonsters\";\nimport RunEncounter from \"./pages/RunEncounter/\";\n\nimport \"./App.css\";\n\nconst App: React.FunctionComponent = () => (\n  <BrowserRouter>\n    <Routes>\n      <Route path=\"/\" element={<DndCombatTracker />}>\n        <Route path=\"encounters\">\n          <Route index element={<Navigate replace to=\"/\" />} />\n          <Route path=\":id\">\n            <Route index element={<EditEncounter />} />\n            <Route path=\"run\" element={<RunEncounter />} />\n          </Route>\n        </Route>\n        <Route path=\"monsters\" element={<MyMonsters />} />\n        <Route index element={<MyEncounters />} />\n      </Route>\n    </Routes>\n  </BrowserRouter>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport App from \"./App\";\n\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}