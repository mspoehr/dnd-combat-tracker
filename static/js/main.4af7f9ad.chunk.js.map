{"version":3,"sources":["redux/data/encountersSlice.ts","redux/data/monstersSlice.ts","redux/initiative-tracker/initiativeTrackerSlice.ts","redux/initiative-tracker/quickAddSlice.ts","redux/store.ts","pages/DndCombatTracker.tsx","pages/EditEncounter.tsx","pages/MyEncounters.tsx","pages/MyMonsters.tsx","pages/RunEncounter/QuickAddModal.tsx","pages/RunEncounter/CreatureHealthTracker.tsx","pages/RunEncounter/DisplayInitiative.tsx","pages/RunEncounter/index.tsx","App.tsx","index.tsx"],"names":["encountersAdapter","createEntityAdapter","selectId","encounter","uuid","sortComparer","a","b","naturalCompare","name","caseInsensitive","encountersSlice","createSlice","initialState","getInitialState","reducers","addEncounter","addOne","removeEncounter","removeOne","actions","selectAllEncounters","getSelectors","state","encounters","selectAll","monstersAdapter","monster","monstersSlice","addMonster","removeMonster","sortInitiativeCreatures","creatures","sort","initiativeDiff","initiative","order","currentOrder","currentInitiative","forEach","creature","normalizeCreatureOrders","adjustedCreatureIndex","index","currentTurn","length","initiativeTrackerSlice","round","addCreature","action","currentTurnUuid","uuidv4","payload","push","findIndex","deleteCreature","splice","newTurn","editCreature","previous","next","Math","max","changeInitiative","newInitiative","isNaN","Number","rollAllInitiative","type","floor","random","adjustCreatureHealth","num","min","hp","currentHp","amount","maxHp","reorderCreature","newIndex","selectInitiativeTurn","initiativeTracker","selectInitiativeRound","selectSortedInitiativeCreatures","createSelector","turn","slice","concat","ac","modalOpen","editingMode","editIndex","quickAddSlice","changeName","changeAc","changeMaxHp","changeType","open","close","JSON","parse","stringify","edit","selectName","quickAdd","selectAc","selectMaxHp","selectInitiative","selectOpen","selectEditingMode","selectEditIndex","selectType","store","configureStore","reducer","monsters","useAppDispatch","useDispatch","useAppSelector","useSelector","DndCombatTracker","EditEncounter","EmptyPlaceholder","Alert","variant","EncounterList","encounterElements","map","MyEncounters","Container","fluid","className","Row","Col","md","Stack","direction","gap","to","Button","onClick","alert","MyMonsters","QuickAddModal","editMode","dispatch","Modal","size","show","onHide","centered","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","value","onChange","e","target","ButtonGroup","radio","idx","ToggleButton","id","checked","currentTarget","Footer","CreatureHealthTracker","props","useRef","useState","showHealth","setShowHealth","hpAdjustment","_setHpAdjustment","ref","style","minWidth","Overlay","rootClose","current","placement","Popover","InitiativeCreature","width","fontSize","DisplayInitiative","initiativeCreatures","onDragEnd","result","destination","source","droppableId","provided","droppableProps","innerRef","draggableId","snapshot","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","marginBottom","opacity","placeholder","Counter","text","InitiativeControlBar","borderBottom","RunEncounter","App","path","element","replace","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4af7f9ad.chunk.js","sourcesContent":["import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport naturalCompare from \"string-natural-compare\";\nimport { UniqueEntity, UniqueIdType } from \"../models\";\n\nexport interface EncounterCreature {\n  creatureUuid: UniqueIdType;\n}\n\nexport interface Encounter extends UniqueEntity {\n  name: string;\n  creatures: EncounterCreature[];\n}\n\nexport const encountersAdapter = createEntityAdapter<Encounter>({\n  selectId: (encounter) => encounter.uuid,\n  sortComparer: (a, b) => naturalCompare(a.name, b.name, { caseInsensitive: true })\n});\n\nexport const encountersSlice = createSlice({\n  name: \"encounters\",\n  initialState: encountersAdapter.getInitialState,\n  reducers: {\n    addEncounter: encountersAdapter.addOne,\n    removeEncounter: encountersAdapter.removeOne\n  }\n});\n\nexport const { addEncounter, removeEncounter } = encountersSlice.actions;\nexport const { selectAll: selectAllEncounters } = encountersAdapter.getSelectors<RootState>(\n  (state) => state.encounters\n);\n\nexport default encountersSlice.reducer;\n","import { createEntityAdapter, createSlice } from \"@reduxjs/toolkit\";\nimport naturalCompare from \"string-natural-compare\";\nimport { Creature } from \"../models\";\n\ninterface Monster extends Creature {\n  type: \"monster\";\n}\n\nexport const monstersAdapter = createEntityAdapter<Monster>({\n  selectId: (monster) => monster.uuid,\n  sortComparer: (a, b) => naturalCompare(a.name, b.name, { caseInsensitive: true })\n});\n\nexport const monstersSlice = createSlice({\n  name: \"monsters\",\n  initialState: monstersAdapter.getInitialState,\n  reducers: {\n    addMonster: monstersAdapter.addOne,\n    removeMonster: monstersAdapter.removeOne\n  }\n});\n\nexport const { addMonster, removeMonster } = monstersSlice.actions;\n\nexport default monstersSlice.reducer;\n","import { createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Creature } from \"../models\";\nimport { RootState } from \"../store\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport interface InitiativeCreature extends Creature {\n  initiative: number;\n  order: number;\n  currentHp: number;\n}\ntype InitiativeCreatureExternal = Omit<InitiativeCreature, \"uuid\" | \"order\">;\n\nconst initialState = {\n  creatures: [] as InitiativeCreature[],\n  currentTurn: 0,\n  round: 0\n};\n\n// Pass creatures as sorted array (initiative descending, order ascending)\nfunction normalizeCreatureOrders(creatures: InitiativeCreature[]) {\n  let currentOrder = 0;\n  let currentInitiative: number | null = null;\n  creatures.forEach((creature) => {\n    if (creature.initiative !== currentInitiative) {\n      currentInitiative = creature.initiative;\n      currentOrder = 0;\n    } else {\n      currentOrder++;\n    }\n\n    creature.order = currentOrder;\n  });\n}\n\nfunction sortInitiativeCreatures(creatures: InitiativeCreature[]) {\n  creatures.sort((a, b) => {\n    const initiativeDiff = b.initiative - a.initiative;\n    if (initiativeDiff === 0) {\n      return a.order - b.order;\n    }\n\n    return initiativeDiff;\n  });\n\n  normalizeCreatureOrders(creatures);\n}\n\nfunction adjustedCreatureIndex(state: RootState[\"initiativeTracker\"], index: number) {\n  return (index + state.currentTurn) % state.creatures.length;\n}\n\nexport const initiativeTrackerSlice = createSlice({\n  name: \"initiativeTracker\",\n  initialState,\n  reducers: {\n    addCreature: (state, action: PayloadAction<InitiativeCreatureExternal>) => {\n      const currentTurnUuid = state.creatures[state.currentTurn]?.uuid;\n\n      const creature: InitiativeCreature = { order: 0, uuid: uuidv4(), ...action.payload };\n      state.creatures.push(creature);\n      sortInitiativeCreatures(state.creatures);\n\n      // If combat has started, preserve the turn of the creature whose turn it currently is\n      if (state.creatures.length > 1 && (state.currentTurn !== 0 || state.round !== 0)) {\n        state.currentTurn = state.creatures.findIndex((creature) => creature.uuid === currentTurnUuid);\n      }\n    },\n    deleteCreature: (state, action: PayloadAction<number>) => {\n      const currentTurnUuid = state.creatures[state.currentTurn]?.uuid;\n\n      const index = adjustedCreatureIndex(state, action.payload);\n      state.creatures.splice(index, 1);\n\n      // If combat has started, preserve the turn of the creature whose turn it currently is, unless they were just deleted\n      if (state.creatures.length > 1 && (state.currentTurn !== 0 || state.round !== 0)) {\n        const newTurn = state.creatures.findIndex((creature) => creature.uuid === currentTurnUuid);\n        if (newTurn !== -1) {\n          state.currentTurn = newTurn;\n        }\n      }\n    },\n    editCreature: (state, action: PayloadAction<{ index: number; creature: InitiativeCreatureExternal }>) => {\n      const index = adjustedCreatureIndex(state, action.payload.index);\n      state.creatures[index] = {\n        ...state.creatures[index],\n        ...action.payload.creature\n      };\n      sortInitiativeCreatures(state.creatures);\n    },\n    previous: (state) => {\n      state.currentTurn--;\n      if (state.currentTurn === -1 && state.round > 0) {\n        state.round -= 1;\n        state.currentTurn = state.creatures.length - 1;\n      }\n\n      if (state.currentTurn < 0) {\n        state.currentTurn = 0;\n      }\n      if (state.round < 0) {\n        state.round = 0;\n      }\n    },\n    next: (state) => {\n      state.currentTurn = (state.currentTurn + 1) % Math.max(state.creatures.length, 1);\n      if (state.currentTurn === 0) {\n        state.round += 1;\n      }\n    },\n    changeInitiative: (state, action: PayloadAction<{ index: number; newInitiative: string }>) => {\n      const newInitiative = action.payload.newInitiative;\n      if (isNaN(Number(newInitiative)) && newInitiative !== \"\") {\n        return;\n      }\n\n      const index = adjustedCreatureIndex(state, action.payload.index);\n      state.creatures[index].initiative = newInitiative === \"\" ? 0 : Number(newInitiative);\n      sortInitiativeCreatures(state.creatures);\n    },\n    rollAllInitiative: (state) => {\n      state.creatures.forEach((creature) => {\n        if (creature.type === \"monster\") {\n          const min = 1;\n          const max = 20;\n          creature.initiative = Math.floor(Math.random() * (max - min + 1) + min);\n          sortInitiativeCreatures(state.creatures);\n        }\n      });\n    },\n    adjustCreatureHealth: (state, action: PayloadAction<{ index: number; amount: number }>) => {\n      const index = adjustedCreatureIndex(state, action.payload.index);\n\n      const hp = state.creatures[index].currentHp + action.payload.amount;\n      const clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max);\n\n      state.creatures[index].currentHp = clamp(hp, 0, state.creatures[index].maxHp);\n    },\n    reorderCreature: (state, action: PayloadAction<{ index: number; newIndex: number }>) => {\n      const index = adjustedCreatureIndex(state, action.payload.index);\n      const newIndex = adjustedCreatureIndex(state, action.payload.newIndex);\n\n      state.creatures[index].initiative = state.creatures[newIndex].initiative;\n      state.creatures[index].order = state.creatures[newIndex].order + (index < newIndex ? 1 : -1);\n\n      sortInitiativeCreatures(state.creatures);\n    }\n  }\n});\n\nexport const {\n  addCreature,\n  deleteCreature,\n  editCreature,\n  changeInitiative,\n  next,\n  previous,\n  adjustCreatureHealth,\n  rollAllInitiative,\n  reorderCreature\n} = initiativeTrackerSlice.actions;\nexport const selectInitiativeTurn = (state: RootState): number => state.initiativeTracker.currentTurn;\nexport const selectInitiativeRound = (state: RootState): number => state.initiativeTracker.round;\nexport const selectInitiativeCreatures = (state: RootState): InitiativeCreature[] => state.initiativeTracker.creatures;\n\nexport const selectSortedInitiativeCreatures = createSelector(\n  selectInitiativeCreatures,\n  selectInitiativeTurn,\n  (creatures, turn) => creatures.slice(turn).concat(creatures.slice(0, turn))\n);\n\nexport default initiativeTrackerSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { CreatureType } from \"../models\";\nimport { RootState } from \"../store\";\nimport { InitiativeCreature } from \"./initiativeTrackerSlice\";\n\nconst initialState = {\n  name: \"\",\n  ac: 0,\n  maxHp: 0,\n  initiative: 0,\n  type: \"monster\" as CreatureType,\n  modalOpen: false,\n  editingMode: false,\n  editIndex: 0\n};\n\nexport const quickAddSlice = createSlice({\n  name: \"quickAdd\",\n  initialState,\n  reducers: {\n    changeName: (state, action: PayloadAction<string>) => {\n      state.name = action.payload;\n    },\n    changeAc: (state, action: PayloadAction<number>) => {\n      if (isNaN(action.payload)) {\n        return;\n      }\n      state.ac = action.payload;\n    },\n    changeMaxHp: (state, action: PayloadAction<number>) => {\n      if (isNaN(action.payload)) {\n        return;\n      }\n      state.maxHp = action.payload;\n    },\n    changeInitiative: (state, action: PayloadAction<number>) => {\n      if (isNaN(action.payload)) {\n        return;\n      }\n      state.initiative = action.payload;\n    },\n    changeType: (state, action: PayloadAction<CreatureType>) => {\n      state.type = action.payload;\n    },\n    open: (state) => {\n      state.modalOpen = true;\n    },\n    close: () => JSON.parse(JSON.stringify(initialState)),\n    edit: (state, action: PayloadAction<{ index: number; creature: InitiativeCreature }>) => {\n      state.editingMode = true;\n      state.name = action.payload.creature.name ?? \"\";\n      state.ac = action.payload.creature.ac ?? 0;\n      state.maxHp = action.payload.creature.maxHp ?? 0;\n      state.initiative = action.payload.creature.initiative ?? 0;\n      state.modalOpen = true;\n      state.editIndex = action.payload.index;\n      state.type = action.payload.creature.type ?? \"monster\";\n    }\n  }\n});\n\nexport const { changeName, changeAc, changeMaxHp, changeInitiative, open, close, edit, changeType } =\n  quickAddSlice.actions;\nexport const selectName = (state: RootState): string => state.quickAdd.name;\nexport const selectAc = (state: RootState): number => state.quickAdd.ac;\nexport const selectMaxHp = (state: RootState): number => state.quickAdd.maxHp;\nexport const selectInitiative = (state: RootState): number => state.quickAdd.initiative;\nexport const selectOpen = (state: RootState): boolean => state.quickAdd.modalOpen;\nexport const selectEditingMode = (state: RootState): boolean => state.quickAdd.editingMode;\nexport const selectEditIndex = (state: RootState): number => state.quickAdd.editIndex;\nexport const selectType = (state: RootState): CreatureType => state.quickAdd.type;\n\nexport default quickAddSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport encountersSlice from \"./data/encountersSlice\";\nimport monstersSlice from \"./data/monstersSlice\";\nimport initiativeTrackerSlice from \"./initiative-tracker/initiativeTrackerSlice\";\nimport quickAddSlice from \"./initiative-tracker/quickAddSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    encounters: encountersSlice,\n    monsters: monstersSlice,\n    initiativeTracker: initiativeTrackerSlice,\n    quickAdd: quickAddSlice\n  }\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\";\nimport { Outlet } from \"react-router-dom\";\n\nconst DndCombatTracker: React.FunctionComponent = () => (\n  <div>\n    <Outlet />\n  </div>\n);\n\nexport default DndCombatTracker;\n","import React from \"react\";\n\nconst EditEncounter: React.FunctionComponent = () => <div>This is where you will go to edit an encounter!</div>;\n\nexport default EditEncounter;\n","import React from \"react\";\n\nimport { Alert, Button, Col, Container, Row, Stack } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { selectAllEncounters } from \"../redux/data/encountersSlice\";\nimport { useAppSelector } from \"../redux/store\";\n\nfunction EmptyPlaceholder() {\n  return <Alert variant=\"info\">There are no encounters yet. Create one now!</Alert>;\n}\n\nfunction EncounterList() {\n  const encounters = useAppSelector(selectAllEncounters);\n  const encounterElements = encounters.map((encounter) => <div key={encounter.uuid}>{encounter.name}</div>);\n\n  return <div>{encounters.length === 0 ? <EmptyPlaceholder /> : encounterElements}</div>;\n}\n\nconst MyEncounters: React.FunctionComponent = () => (\n  <div>\n    <Container fluid className=\"my-3\">\n      <Row>\n        <Col>\n          <h1>My Encounters</h1>\n        </Col>\n        <Col md=\"auto\">\n          <Stack direction=\"horizontal\" gap={2}>\n            <Link to=\"/encounters/quick/run\">\n              <Button variant=\"outline-primary\">Quick Run Encounter</Button>\n            </Link>\n            <Button variant=\"primary\" onClick={() => alert(\"Not implemented yet!\")}>\n              Add Encounter\n            </Button>\n          </Stack>\n        </Col>\n      </Row>\n      <Row>\n        <EncounterList />\n      </Row>\n    </Container>\n  </div>\n);\n\nexport default MyEncounters;\n","import React from \"react\";\n\nconst MyMonsters: React.FunctionComponent = () => <div>This is a list of all my monsters:</div>;\n\nexport default MyMonsters;\n","import React from \"react\";\nimport { Button, ButtonGroup, Col, Form, Modal, Row, ToggleButton } from \"react-bootstrap\";\nimport { addCreature, editCreature } from \"../../redux/initiative-tracker/initiativeTrackerSlice\";\nimport {\n  changeName,\n  changeAc,\n  changeMaxHp,\n  changeInitiative,\n  selectAc,\n  selectInitiative,\n  selectMaxHp,\n  selectName,\n  close,\n  selectOpen,\n  selectEditingMode,\n  selectEditIndex,\n  selectType,\n  changeType\n} from \"../../redux/initiative-tracker/quickAddSlice\";\nimport { CreatureType } from \"../../redux/models\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/store\";\n\nconst QuickAddModal: React.FunctionComponent = () => {\n  const name = useAppSelector(selectName);\n  const ac = useAppSelector(selectAc);\n  const maxHp = useAppSelector(selectMaxHp);\n  const initiative = useAppSelector(selectInitiative);\n  const editMode = useAppSelector(selectEditingMode);\n  const editIndex = useAppSelector(selectEditIndex);\n  const type = useAppSelector(selectType);\n  const dispatch = useAppDispatch();\n  const radios = [\n    { name: \"Player\", value: \"player\" },\n    { name: \"Monster\", value: \"monster\" }\n  ];\n  const save = () => {\n    const creature = {\n      name,\n      ac,\n      maxHp,\n      initiative,\n      currentHp: maxHp,\n      type: type\n    };\n\n    if (!editMode) {\n      dispatch(addCreature(creature));\n    } else {\n      dispatch(editCreature({ index: editIndex, creature }));\n    }\n    dispatch(close());\n  };\n\n  return (\n    <Modal size=\"lg\" show={useAppSelector(selectOpen)} onHide={() => dispatch(close())} centered>\n      <Modal.Header closeButton>\n        <Modal.Title>Quick Add Creature</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Row>\n            <Col>\n              <Form.Group className=\"mv-3\" controlId=\"exampleForm.ControlTextArea1\">\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                  value={name}\n                  onChange={(e) => {\n                    dispatch(changeName(e.target.value));\n                  }}\n                  type=\"text\"\n                ></Form.Control>\n              </Form.Group>\n            </Col>\n            <Col>\n              <Form.Group className=\"mv-3\" controlId=\"exampleForm.ControlTextArea1\">\n                <Form.Label>Armor Class</Form.Label>\n                <Form.Control\n                  value={ac}\n                  onChange={(e) => {\n                    dispatch(changeAc(Number(e.target.value)));\n                  }}\n                  type=\"text\"\n                ></Form.Control>\n              </Form.Group>\n            </Col>\n            <Col>\n              <Form.Group className=\"mv-3\" controlId=\"exampleForm.ControlTextArea1\">\n                <Form.Label>Max HP(Optional)</Form.Label>\n                <Form.Control\n                  value={maxHp}\n                  onChange={(e) => {\n                    dispatch(changeMaxHp(Number(e.target.value)));\n                  }}\n                  type=\"text\"\n                ></Form.Control>\n              </Form.Group>\n            </Col>\n            <Col>\n              <Form.Group className=\"mv-3\" controlId=\"exampleForm.ControlTextArea1\">\n                <Form.Label>Initiative(Optional)</Form.Label>\n                <Form.Control\n                  value={initiative}\n                  onChange={(e) => {\n                    dispatch(changeInitiative(Number(e.target.value)));\n                  }}\n                  type=\"text\"\n                ></Form.Control>\n              </Form.Group>\n            </Col>\n            <Col>\n              <Form.Group className=\"mv-3\" controlId=\"exampleForm.ControlTextArea1\">\n                <Form.Label>Creature Type</Form.Label>\n                <ButtonGroup>\n                  {radios.map((radio, idx) => (\n                    <ToggleButton\n                      key={idx}\n                      id={`radio-${idx}`}\n                      type=\"radio\"\n                      variant={idx % 2 ? \"outline-danger\" : \"outline-success\"}\n                      name=\"radio\"\n                      value={radio.value}\n                      checked={type === (radio.value as CreatureType)}\n                      onChange={(e) => dispatch(changeType(e.currentTarget.value as CreatureType))}\n                    >\n                      {radio.name}\n                    </ToggleButton>\n                  ))}\n                </ButtonGroup>\n              </Form.Group>\n            </Col>\n          </Row>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={() => dispatch(close())}>\n          Close\n        </Button>\n        <Button variant=\"primary\" onClick={save}>\n          Save Changes\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default QuickAddModal;\n","import React, { useRef, useState } from \"react\";\nimport { Button, Form, Overlay, Popover, Stack } from \"react-bootstrap\";\nimport { InitiativeCreature, adjustCreatureHealth } from \"../../redux/initiative-tracker/initiativeTrackerSlice\";\nimport { useAppDispatch } from \"../../redux/store\";\n\ninterface Props {\n  creature: InitiativeCreature;\n  index: number;\n}\n\nconst CreatureHealthTracker: React.FunctionComponent<Props> = (props) => {\n  const target = useRef(null);\n  const [showHealth, setShowHealth] = useState(false);\n  const [hpAdjustment, _setHpAdjustment] = useState(\"0\");\n\n  const dispatch = useAppDispatch();\n\n  const setHpAdjustment = (value: string) => {\n    if (isNaN(Number(value)) && value !== \"\") {\n      return;\n    }\n\n    _setHpAdjustment(value === \"\" ? \"\" : value);\n  };\n\n  const close = () => {\n    _setHpAdjustment(\"0\");\n    setShowHealth(false);\n  };\n\n  const heal = () => {\n    dispatch(adjustCreatureHealth({ index: props.index, amount: Number(hpAdjustment) }));\n    close();\n  };\n\n  const damage = () => {\n    dispatch(adjustCreatureHealth({ index: props.index, amount: -Number(hpAdjustment) }));\n    close();\n  };\n\n  return (\n    <>\n      <div ref={target} onClick={() => setShowHealth(true)} style={{ minWidth: \"110px\" }}>\n        <div>HP</div>\n        <div className=\"flex-row align-items-center\">\n          <div className=\"bg-white p-2 rounded d-inline-block\">{props.creature.currentHp}</div>\n          <span className=\"mx-2\">/</span>\n          <span>{props.creature.maxHp}</span>\n        </div>\n      </div>\n      <Overlay rootClose={true} target={target.current} show={showHealth} placement=\"right\" onHide={close}>\n        <Popover>\n          <Stack direction=\"vertical\" gap={2}>\n            <Button variant=\"success\" onClick={heal}>\n              Heal\n            </Button>\n            <Form.Control value={hpAdjustment} type=\"text\" onChange={(e) => setHpAdjustment(e.target.value)} />\n            <Button variant=\"danger\" onClick={damage}>\n              Damage\n            </Button>\n          </Stack>\n        </Popover>\n      </Overlay>\n    </>\n  );\n};\nexport default CreatureHealthTracker;\n","import React from \"react\";\nimport { Button, Form, Stack } from \"react-bootstrap\";\n\nimport QuickAddModal from \"./QuickAddModal\";\nimport { open, edit } from \"../../redux/initiative-tracker/quickAddSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/store\";\nimport {\n  changeInitiative,\n  deleteCreature,\n  InitiativeCreature as InitiativeCreatureType,\n  selectSortedInitiativeCreatures,\n  rollAllInitiative,\n  reorderCreature\n} from \"../../redux/initiative-tracker/initiativeTrackerSlice\";\n\nimport \"./DisplayInitiative.css\";\nimport CreatureHealthTracker from \"./CreatureHealthTracker\";\nimport {\n  DragDropContext,\n  Draggable,\n  DraggingStyle,\n  Droppable,\n  DropResult,\n  NotDraggingStyle\n} from \"react-beautiful-dnd\";\n\nfunction InitiativeCreature(props: { creature: InitiativeCreatureType; index: number }) {\n  const dispatch = useAppDispatch();\n\n  return (\n    <div className=\"initiative-creature\">\n      <div>\n        <div>\n          <div>INITIATIVE</div>\n          <Form.Control\n            type=\"text\"\n            value={props.creature.initiative ?? \"\"}\n            style={{ width: \"100px\" }}\n            className=\"text-center\"\n            onChange={(e) => dispatch(changeInitiative({ index: props.index, newInitiative: e.target.value }))}\n          />\n        </div>\n      </div>\n      <div className=\"flex-grow-1 text-start\">\n        <div className=\"fw-bold\" style={{ fontSize: \"1.5em\" }}>\n          {props.creature.name}\n        </div>\n        <div>AC {props.creature.ac}</div>\n\n        <Stack direction=\"horizontal\" gap={2}>\n          <Button onClick={() => dispatch(edit({ index: props.index, creature: props.creature }))}>Edit</Button>\n          <Button variant=\"danger\" onClick={() => dispatch(deleteCreature(props.index))}>\n            Delete\n          </Button>\n        </Stack>\n      </div>\n      <div>\n        <CreatureHealthTracker index={props.index} creature={props.creature} />\n      </div>\n    </div>\n  );\n}\n\nconst DisplayInitiative: React.FunctionComponent = () => {\n  const initiativeCreatures = useAppSelector(selectSortedInitiativeCreatures);\n  const dispatch = useAppDispatch();\n\n  const onDragEnd = (result: DropResult) => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    dispatch(reorderCreature({ index: result.source.index, newIndex: result.destination.index }));\n  };\n\n  const getItemStyle = (\n    isDragging: boolean,\n    draggableStyle: NotDraggingStyle | DraggingStyle | undefined\n  ): React.CSSProperties => ({\n    userSelect: \"none\",\n    marginBottom: \"1rem\",\n    ...draggableStyle,\n\n    // must come after ...draggableStyle\n    opacity: isDragging ? 0.5 : 1\n  });\n\n  return (\n    <div>\n      <Stack direction=\"horizontal\" gap={2}>\n        <Button onClick={() => dispatch(open())}>Quick Add Creature</Button>\n        <Button onClick={() => dispatch(rollAllInitiative())}>Roll Initiative</Button>\n      </Stack>\n      <QuickAddModal />\n\n      <div>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"droppable\">\n            {(provided) => (\n              <div {...provided.droppableProps} ref={provided.innerRef}>\n                {initiativeCreatures.map((creature, index) => (\n                  <Draggable key={creature.uuid} draggableId={creature.uuid} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}\n                      >\n                        <InitiativeCreature key={creature.uuid} creature={creature} index={index} />\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayInitiative;\n","import React from \"react\";\nimport { Button, Col, Container, Row, Stack } from \"react-bootstrap\";\nimport DisplayInitiative from \"./DisplayInitiative\";\nimport {\n  next,\n  previous,\n  selectInitiativeRound,\n  selectInitiativeTurn\n} from \"../../redux/initiative-tracker/initiativeTrackerSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/store\";\n\nfunction Counter(props: { text: string; value: number }) {\n  return (\n    <div className=\"text-center fw-bold\">\n      <div>{props.text}</div>\n      <div style={{ fontSize: \"1.5em\" }}>{props.value + 1}</div>\n    </div>\n  );\n}\n\nfunction InitiativeControlBar() {\n  const turn = useAppSelector(selectInitiativeTurn);\n  const round = useAppSelector(selectInitiativeRound);\n\n  const dispatch = useAppDispatch();\n\n  return (\n    <Container fluid className=\"p-2 mb-4\" style={{ borderBottom: \"2px solid black\" }}>\n      <Row className=\"align-items-center\">\n        <Col>\n          <h1 className=\"fw-bold\">Quick Encounter</h1>\n        </Col>\n        <Col>\n          <Stack direction=\"horizontal\" gap={4}>\n            <Counter text=\"ROUND\" value={round} />\n            <Counter text=\"TURN\" value={turn} />\n          </Stack>\n        </Col>\n        <Col md=\"auto\">\n          <Stack direction=\"horizontal\" gap={2}>\n            <Button variant=\"outline-primary\" onClick={() => dispatch(previous())}>\n              Previous turn\n            </Button>\n            <Button onClick={() => dispatch(next())}>Next turn</Button>\n          </Stack>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nconst RunEncounter: React.FunctionComponent = () => (\n  <div>\n    <InitiativeControlBar></InitiativeControlBar>\n    <DisplayInitiative></DisplayInitiative>\n  </div>\n);\n\nexport default RunEncounter;\n","import React from \"react\";\nimport { BrowserRouter, Navigate, Route, Routes } from \"react-router-dom\";\n\nimport DndCombatTracker from \"./pages/DndCombatTracker\";\nimport EditEncounter from \"./pages/EditEncounter\";\nimport MyEncounters from \"./pages/MyEncounters\";\nimport MyMonsters from \"./pages/MyMonsters\";\nimport RunEncounter from \"./pages/RunEncounter/\";\n\nimport \"./App.css\";\n\nconst App: React.FunctionComponent = () => (\n  <BrowserRouter>\n    <Routes>\n      <Route path=\"/\" element={<DndCombatTracker />}>\n        <Route path=\"encounters\">\n          <Route index element={<Navigate replace to=\"/\" />} />\n          <Route path=\":id\">\n            <Route index element={<EditEncounter />} />\n            <Route path=\"run\" element={<RunEncounter />} />\n          </Route>\n        </Route>\n        <Route path=\"monsters\" element={<MyMonsters />} />\n        <Route index element={<MyEncounters />} />\n      </Route>\n    </Routes>\n  </BrowserRouter>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport App from \"./App\";\n\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}